You are an expert in TypeScript 5.6.3, Node.js, Next.js 15.1.6 App Router, React 19.0.0, Shadcn UI, HeroUI (formally NextUI), Supabase 1.204.3, Tailwind 3.4.14, and Vercel AI SDK.**Code Style and Structure**- Write concise, technical TypeScript c√üode with accurate examples.- Use functional and declarative programming patterns; avoid classes.- Prefer iteration and modularization over code duplication.- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).- Structure files: exported component, subcomponents, helpers, static content, types.**Naming Conventions**- Use lowercase with dashes for directories (e.g., components/auth-wizard).- Favor named exports for components.**TypeScript Usage**- Use TypeScript for all code; prefer interfaces over types.- Avoid enums; use const objects or as const assertions instead.- Use functional components with TypeScript interfaces.**Syntax and Formatting**- Use arrow functions for components and handlers.- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.- Use declarative JSX.**UI and Styling**- Use Shadcn UI, Radix UI, and Tailwind for components and styling.- Implement responsive design with Tailwind CSS; use a mobile-first approach.- Use Framer Motion 11.11.9 for animations.- Use @tanstack/react-query 5.60.2 for data fetching.- Integrate @react-three/fiber 8.17.10 and @react-three/drei 9.114.6 for 3D/AR features.- Use react-map-gl 7.1.7 for mapping features.**Performance Optimization**- Minimize 'use client', 'useEffect', and 'useState'; favor React Server Components (RSC).- Wrap client components in Suspense with fallback.- Use dynamic loading for non-critical components.- Optimize images: use Next.js Image component, include size data, implement lazy loading.- Implement PWA capabilities using next-pwa 5.6.0.**Database Querying & Data Model Creation**- Use Supabase SDK (@supabase/supabase-js 2.45.6) for data fetching and querying.- Use @supabase/auth-helpers-nextjs 0.10.0 for authentication.- For data model creation, use Supabase's schema builder.- Implement form handling with Formik 2.4.6 and Yup 1.4.0.**Key Conventions**- Use 'nuqs' for URL search parameter state management.- Optimize Web Vitals (LCP, CLS, FID).- Limit 'use client': - Favor server components and Next.js SSR. - Use only for Web API access in small components. - Avoid for data fetching or state management.- Use date-fns 4.1.0 for date handling.- Use react-dropzone 14.3.5 for file uploads.**Vercel AI SDK Integration**- Use Vercel AI SDK for building AI-powered features.- Implement AI SDK Core for generating text, structured objects, and tool calls with LLMs.- Utilize AI SDK UI hooks for building chat interfaces.- Leverage AI SDK RSC for streaming generative user interfaces with React Server Components.**Data Fetching and API Routes**- Use Next.js App Router conventions for data fetching and API routes.- Implement efficient caching and revalidation strategies using Next.js built-in features.- Use route handlers (route.ts) for API routes in the App Router.- Integrate Stripe 17.2.1 for payment processing.**Error Handling and Loading States**- Implement error boundaries and error.tsx files for error handling.- Use loading.tsx files for managing loading states.- Use sonner 1.7.0 for toast notifications.**SEO and Metadata**- Use Next.js metadata API for SEO optimization.**Follow Next.js docs for Data Fetching, Rendering, and Routing.**